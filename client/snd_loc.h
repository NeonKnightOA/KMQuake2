/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
// snd_loc.h -- private sound functions

#pragma once

#pragma region ======================= Sound backend structs

// Holds one sample with 2 channels
typedef struct
{
	int left;
	int right;
} portable_samplepair_t;

// Holds a cached SFX and it's meta data
typedef struct
{
	int length;
	int loopstart;
	int width;
	int stereo;
	byte data[1]; // Variable sized
} sfxcache_t;

// Holds a SFX
typedef struct sfx_s
{
	char name[MAX_QPATH];
	int	registration_sequence;
	sfxcache_t *cache;
	char *truename;
} sfx_t;

// A playsound_t will be generated by each call to S_StartSound,
// when the mixer reaches playsound->begin, the playsound will be assigned to a channel.
typedef struct playsound_s
{
	struct playsound_s *prev;
	struct playsound_s *next;
	sfx_t *sfx;
	float volume;
	float attenuation;
	int entnum;
	int entchannel;
	qboolean fixed_origin; // Use origin field instead of entnum's origin
	vec3_t origin;
	uint begin; // Begin on this sample
} playsound_t;

// Interface to pass data and metadata between the frontend and the backend.
typedef struct
{
	int channels;
	int samples; // Mono samples in buffer
	int submission_chunk; // Don't mix less than this in mono samples
	int samplepos;
	int samplebits;
	int speed;
	byte *buffer;
} sound_t;

// Holds all information for one playback channel.
typedef struct
{
	sfx_t *sfx;		// sfx number
	int leftvol;	// 0-255 volume
	int rightvol;	// 0-255 volume
	int end;		// End time in global paintsamples
	int pos;		// Sample position in sfx
	int entnum;		// To allow overriding a specific sound
	int entchannel;
	vec3_t origin;			// Only use if fixed_origin is set
	vec_t dist_mult;		// Distance multiplier (attenuation/clipK)
	int master_vol;			// 0-255 master volume
	qboolean fixed_origin;	// Use origin instead of fetching entnum's origin
	qboolean autosound;		// From an entity->sound, cleared each frame
	qboolean streaming;		// If true, OGG track is streamed using this channel
} channel_t;

// Information read from wave file header.
typedef struct
{
	int rate;
	int width;
	int channels;
	int loopstart;
	int samples;
	int dataofs; // Chunk starts this many bytes from file start
} wavinfo_t;

#pragma endregion

#pragma region ======================= Sound backend variables

#define	MAX_CHANNELS	64	//<- CDawg changed, was 32
extern channel_t channels[MAX_CHANNELS];
extern int s_numchannels; //mxd

extern int paintedtime;
extern int s_rawend;
extern sound_t sound; //mxd
extern qboolean sound_started; //mxd
extern playsound_t s_pendingplays;

extern vec3_t listener_origin; //mxd
extern vec3_t listener_right; //mxd

#define	MAX_RAW_SAMPLES	8192
extern portable_samplepair_t s_rawsamples[MAX_RAW_SAMPLES];

extern cvar_t *s_volume;
extern cvar_t *s_loadas8bit;
extern cvar_t *s_khz;
extern cvar_t *s_show;
extern cvar_t *s_mixahead;
extern cvar_t *s_testsound;
extern cvar_t *s_musicvolume; // Q2E
extern cvar_t *s_sndbits; //mxd
extern cvar_t *s_sndchannels; //mxd

#pragma endregion

#pragma region ======================= Sound backend functions

sfxcache_t *S_LoadSound(sfx_t *s);
wavinfo_t S_GetWavInfo(char *name, byte *wav, int wavlength); //mxd
void S_IssuePlaysound(playsound_t *ps);

// Picks a channel based on priorities, empty slots, number of channels
channel_t *S_PickChannel(int entnum, int entchannel);

#pragma endregion

#pragma region ======================= SDL2 sound functions

qboolean SDL_BackendInit();
void SDL_BackendShutdown();
void SDL_Update();
qboolean SDL_Cache(sfx_t *sfx, const wavinfo_t *info, const byte *data);
void SDL_RawSamples(const int samples, const int rate, const int width, const int channels, const byte *data, const float volume);
void SDL_Spatialize(channel_t *ch);
void SDL_ClearBuffer();

#pragma endregion